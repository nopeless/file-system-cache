{"version":3,"sources":["../src/funcs.js"],"names":["isNothing","value","R","isNil","isEmpty","isString","is","String","compact","pipe","flatten","reject","toStringArray","map","toString","toAbsolutePath","path","startsWith","fsPath","resolve","ensureString","curry","defaultValue","text","isFileSync","fs","existsSync","lstatSync","isFile","readFileSync","Error","existsP","Promise","exists","removeFileP","then","remove","err","catch","e","finally","filePathsP","basePath","ns","readdir","fileNames","paths","filter","name","contains","hash","values","undefined","resultHash","crypto","createHash","addValue","update","addValues","forEach","digest"],"mappings":"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","file":"funcs.js","sourcesContent":["import R from 'ramda';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\nimport crypto from 'crypto';\nimport Promise from 'bluebird';\n\n\nexport const isNothing = (value) => R.isNil(value) || R.isEmpty(value);\nexport const isString = R.is(String);\nexport const compact = R.pipe(R.flatten, R.reject(R.isNil));\nexport const toStringArray = R.pipe(compact, R.map(R.toString));\nexport const toAbsolutePath = (path) => (path.startsWith('.') ? fsPath.resolve(path) : path);\nexport const ensureString = R.curry(\n  (defaultValue, text) => (R.is(String, text) ? text : defaultValue),\n);\n\n\nexport const isFileSync = (path) => {\n  if (fs.existsSync(path)) {\n    return fs.lstatSync(path).isFile();\n  }\n  return false;\n};\n\n\nexport const readFileSync = (path) => {\n  if (fs.existsSync(path)) {\n    return fs.readFileSync(path).toString();\n  }\n  throw new Error(`The file '${path}' does not exist.`);\n};\n\n\nexport const existsP = (path) => new Promise((resolve) => {\n  fs.exists(path, (exists) => resolve(exists));\n});\n\n\nexport const removeFileP = (path) => new Promise((resolve, reject) => {\n  existsP(path)\n    .then((exists) => {\n      if (exists) {\n        fs.remove(path, (err) => {\n          if (err) { reject(err); } else { resolve(); }\n        });\n      } else {\n        resolve();\n      }\n    }).catch((e) => reject(e)).finally(() => null);\n});\n\n\nexport const filePathsP = (basePath, ns) => new Promise((resolve, reject) => {\n  existsP(basePath)\n    .then((exists) => {\n      if (!exists) { resolve([]); return; }\n      fs.readdir(basePath, (err, fileNames) => {\n        if (err) {\n          reject(err);\n        } else {\n          const paths = R.pipe(\n            compact,\n            R.filter((name) => (ns ? name.startsWith(ns) : true)),\n            R.filter((name) => (!ns ? !R.contains('-')(name) : true)),\n            R.map((name) => `${basePath}/${name}`),\n          )(fileNames);\n          resolve(paths);\n        }\n      });\n    });\n});\n\n\n/**\n * Turns a set of values into a HEX hash code.\n * @param values: The set of values to hash.\n * @return {String} or undefined.\n */\nexport const hash = (...values) => {\n  if (R.pipe(compact, R.isEmpty)(values)) { return undefined; }\n  const resultHash = crypto.createHash('md5');\n  const addValue = (value) => resultHash.update(value);\n  const addValues = R.forEach(addValue);\n  R.pipe(\n    toStringArray,\n    addValues,\n  )(values);\n  return resultHash.digest('hex');\n};\n"]}